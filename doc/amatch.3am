.TH AREGEX 3am "Nov 24 2018" "Free Software Foundation" "GNU Awk Extension Modules"
.SH NAME
\fBaregex\fR \- Approximate (fuzzy) regular expresion or plain string matching using the TRE library
.SH SYNOPSIS
.ft CW
@load "aregex"
.sp
match_distance = aregex(regex, string [, max_cost])
.ft R
.SH DESCRIPTION
The
.I aregex
extension adds a function named
.BR aregex()
as follows:
.TP
\fBaregex(\fIr \fB, \fIs \fR[\fB, \fIc\fR]\fB)\fR
.TP
This function takes two mandatory string arguments, and an optional third integer argument. \fIr \fRis an extended regular expression or plain string to be matched against string \fIs\fR. The regex (\fIr\fR) is bounded by double-quotes, not by the usual \fIgawk\fR slashes. \fIc\fR is an optional total cost of additions, deletions and substitutions (each of cost = 1). Default value of \fIc\fR is 2.
.TP
The function returns an integer: (i) \fI0\fR or \fI>0\fR on a successful match, with the value being the Levenshtein distance between string \fIs\fR and the closest string expanded from the regex \fIr\fR, (ii) \fI-1\fR for a failure to match (i.e., total cost of approximate match > \fIc\fR), or (iii) \fI-999\fR for an error of the TRE library.
.TP
Place plain text (or regex) between `^' and `$' in \fIr\fR to match two full strings or whole words (i.e., so that \fIr\fR does not just act as a substring).  
.\" .SH NOTES
.\" .SH BUGS
.SH EXAMPLE
.ft CW
.nf
@load "aregex"
\&...
print "The distance between 'abcdef' and 'abdex' is " \\
  aregex("abcdef", "abdex", 3)
.fi
.ft R
.SH "SEE ALSO"
The Gawk extension lib: https://sourceforge.net/projects/gawkextlib/
.PP
TRE library: https://laurikari.net/tre/
.SH AUTHORS
Cam Webb <cw@camwebb.info>, @laurikari for the TRE library, the \fIgawkextlib\fR authors 
.\" .SH COPYING PERMISSIONS
